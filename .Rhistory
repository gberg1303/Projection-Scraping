gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, duration = 27, renderer = ffmpeg_renderer()
)
source('~/Google Drive/Random/Sports/Data Twitter Account/Random/True Rates and Grades/True Completion Percentage.R', echo=TRUE)
# group and summarize
QB_Data <- NFL_PBP %>%
filter(pass == 1, !is.na(cpoe),!is.na(epa)) %>%
group_by(passer_player_name) %>%
summarise(
Dropbacks = sum(qb_dropback),
Attempts = sum(pass_attempt),
Completions = sum(complete_pass),
EPA = mean(epa, na.rm = TRUE),
cpoe = mean(cpoe, na.rm = TRUE)
) %>%
mutate(Composite = cpoe*.009+EPA*.2+.09) %>%
filter(!is.na(passer_player_name))
# Create an empirical beta prior. Ebbr available from: https://github.com/dgrtwo/ebbr
# Now fit each player's actual results to the prior
QB_Data <- augment(QB_Data %>%
ebb_fit_prior(Completions, Attempts), data = QB_Data) %>%
arrange(-.fitted)
# group and summarize
QB_Data <- NFL_PBP %>%
filter(pass == 1, !is.na(cpoe),!is.na(epa)) %>%
group_by(passer_player_name) %>%
summarise(
Dropbacks = sum(qb_dropback),
Attempts = sum(pass_attempt),
Completions = sum(complete_pass),
EPA = mean(epa, na.rm = TRUE),
cpoe = mean(cpoe, na.rm = TRUE)
) %>%
mutate(Composite = cpoe*.009+EPA*.2+.09) %>%
filter(!is.na(passer_player_name)) %>% collect()
# Create an empirical beta prior. Ebbr available from: https://github.com/dgrtwo/ebbr
# Now fit each player's actual results to the prior
QB_Data <- augment(QB_Data %>%
ebb_fit_prior(Completions, Attempts), data = QB_Data) %>%
arrange(-.fitted)
# Add Tiers based on fitted values
scoreThreshold <- 1
setTier <- function(points){
threshold <- scoreThreshold
if(is.na(threshold))
threshold <- 20
tiers <- rep(as.numeric(NA), length(points))
tierNum <- 1
points.order <- order(-points)
points <- points[points.order]
repeat{
tiers[points >= floor(max(points[is.na(tiers)]) - threshold) & is.na(tiers)] <- tierNum
if(all(!is.na(tiers)))
break
tierNum <- tierNum + 1
}
tiers[points.order] <- tiers
return(tiers)
}
QB_Data <- QB_Data %>%
mutate(tier = setTier(.fitted*100))
rm(scoreThreshold, clusterTier, simpleCap, setTier)
# Graph it
QB_Data %>%
filter(Dropbacks >= 300) %>%
mutate(passer_player_name = factor(passer_player_name, levels = passer_player_name[order(.fitted)])) %>%
ggplot() +
aes(x = passer_player_name, y = .fitted, ymin = .low, ymax = .high, color = as.factor(tier)) +
geom_errorbar(width = .3) +
geom_point(size = 6, color = "white") +
geom_text(aes(y = .fitted, label = round(.fitted, 2)), size = 3) +
geom_text(aes(y = .high, label = passer_player_name, hjust = -.05, angle = 0), size = 3) +
coord_flip() +
theme_minimal() +
scale_colour_gdocs() +
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "bold")) +
labs(y = "'True' Completion Percentage",
title = paste0(min(NFL_PBP$season), "-", max(NFL_PBP$season), " 'True' Completion Percentage for NFL Quarterbacks"))
# group and summarize
QB_Data <- NFL_PBP %>%
filter(pass == 1, !is.na(cpoe),!is.na(epa), season > 2010) %>%
group_by(passer_player_name) %>%
summarise(
Dropbacks = sum(qb_dropback),
Attempts = sum(pass_attempt),
Completions = sum(complete_pass),
EPA = mean(epa, na.rm = TRUE),
cpoe = mean(cpoe, na.rm = TRUE)
) %>%
mutate(Composite = cpoe*.009+EPA*.2+.09) %>%
filter(!is.na(passer_player_name)) %>% collect()
# Create an empirical beta prior. Ebbr available from: https://github.com/dgrtwo/ebbr
# Now fit each player's actual results to the prior
QB_Data <- augment(QB_Data %>%
ebb_fit_prior(Completions, Attempts), data = QB_Data) %>%
arrange(-.fitted)
# Add Tiers based on fitted values
scoreThreshold <- 1
setTier <- function(points){
threshold <- scoreThreshold
if(is.na(threshold))
threshold <- 20
tiers <- rep(as.numeric(NA), length(points))
tierNum <- 1
points.order <- order(-points)
points <- points[points.order]
repeat{
tiers[points >= floor(max(points[is.na(tiers)]) - threshold) & is.na(tiers)] <- tierNum
if(all(!is.na(tiers)))
break
tierNum <- tierNum + 1
}
tiers[points.order] <- tiers
return(tiers)
}
QB_Data <- QB_Data %>%
mutate(tier = setTier(.fitted*100))
rm(scoreThreshold, clusterTier, simpleCap, setTier)
# Graph it
# Graph it
QB_Data %>%
filter(Dropbacks >= 300) %>%
mutate(passer_player_name = factor(passer_player_name, levels = passer_player_name[order(.fitted)])) %>%
ggplot() +
aes(x = passer_player_name, y = .fitted, ymin = .low, ymax = .high, color = as.factor(tier)) +
geom_errorbar(width = .3) +
geom_point(size = 6, color = "white") +
geom_text(aes(y = .fitted, label = round(.fitted, 2)), size = 3) +
geom_text(aes(y = .high, label = passer_player_name, hjust = -.05, angle = 0), size = 3) +
coord_flip() +
theme_minimal() +
scale_colour_gdocs() +
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "bold")) +
labs(y = "'True' Completion Percentage",
title = paste0("'True' Completion Percentage for NFL Quarterbacks"))
source('~/Google Drive/Random/Sports/Data Twitter Account/Random/True Rates and Grades/True Success Rate.R', echo=TRUE)
# Graph it
QB_Data %>%
filter(Dropbacks >= 400) %>%
mutate(passer_player_name = factor(passer_player_name, levels = passer_player_name[order(.fitted)])) %>%
ggplot() +
aes(x = passer_player_name, y = .fitted, ymin = .low, ymax = .high, color = as.factor(tier)) +
geom_errorbar(width = .3) +
geom_point(size = 6, color = "white") +
geom_text(aes(y = .fitted, label = round(.fitted, 2)), size = 3) +
geom_text(aes(y = .high, label = passer_player_name, hjust = -.05, angle = 0), size = 3) +
coord_flip() +
theme_minimal() +
#scale_colour_gdocs() +
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "bold")) +
labs(y = "'True' Dropback Success Rate",
title = paste0(" 'True' Dropback Success Rate for NFL Quarterbacks"))
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_states(season, transition_length = 1, state_length = 2),
width = 1024, height = 512, end_pause = 10,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_states(season, transition_length = 1, state_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_states(season, transition_length = 1, state_length = 2)
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_states(season, transition_length = 1, state_length = 1),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
?transition_events
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 2, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 1, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 2, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, duration = 27, renderer = ffmpeg_renderer(),
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20,
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 20
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 15
)
animate(
Go_For_It_Data %>%
filter(season > 2005) %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 15
)
animate(
Go_For_It_Data %>%
filter(season > 2005) %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 12
)
### Get Player
ESPN_JSON <- tryCatch(jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))[[1]], error = function(x){
RJSONIO::fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))[[1]]
})
season = 2020
### Get Player
ESPN_JSON <- tryCatch(jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))[[1]], error = function(x){
RJSONIO::fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))[[1]]
})
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))[[1]]
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
##### Season Projections
source('/Users/jonathangoldberg/Google Drive/Random/Sports/Fantasy Football/Projection Scraping/Projections_Main.R', echo=TRUE)
setwd("/Users/jonathangoldberg/Google Drive/Random/Sports/Fantasy Football/Projection Scraping")
Fantasy_Football_Projections(sources = c(
"FantasySharks",
#"CBS",
"ESPN",
"Sleeper",
#"Yahoo",
"FantasyPros",
"NFL"), Week = 1, Season = 2020,
Scoring = "Half", VOR = "Custom", MaxBid = FALSE, Keep.Platform.Projections = TRUE, Proper.Floors = TRUE, Predictions = FALSE)
View(Fantasy_Projections)
View(Combined_Projections)
