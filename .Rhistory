theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_states(season, transition_length = 1, state_length = 1),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
?transition_events
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 2, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 1, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = order, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
transition_events(season, enter_length = 2, exit_length = 2),
width = 1024, height = 512,
#duration = 27, renderer = ffmpeg_renderer()
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, duration = 27, renderer = ffmpeg_renderer(),
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20,
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 20
)
animate(
Go_For_It_Data %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 15
)
animate(
Go_For_It_Data %>%
filter(season > 2005) %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 15
)
animate(
Go_For_It_Data %>%
filter(season > 2005) %>%
group_by(season) %>%
mutate(order = rank(-GO_Rate, ties.method = "random")) %>%
arrange(order) %>%
ggplot(aes(x = posteam, y = GO_Rate)) +
theme_minimal() +
geom_bar(stat = "identity", size = 1, width = .5, aes(color = team_color2, fill = team_color)) +
geom_image(aes(image = team_logo_espn), size = .05, nudge_y = 1) +
scale_fill_manual(values = set_names(unique(Go_For_It_Data$team_color), as.vector(unique(Go_For_It_Data$team_color)))) +
scale_color_manual(values = set_names(unique(Go_For_It_Data$team_color2), as.vector(unique(Go_For_It_Data$team_color2)))) +
scale_y_continuous(expand = c(.1, 0)) +
theme(legend.position = "none",
plot.title = element_text(face = "bold"),
axis.text.x = element_blank(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
labs(y = "4th Down Go-For-It Rate",
x = "Team",
title = paste0("NFL ({frame_time}): 4th Down Go-For-It Rate*"),
caption = "@gberg1303 | nflfastR | Within 20-80% Win Probabilty | *On Plays Recommended by the NYT") +
gganimate::transition_time(season),
width = 1024, height = 512, end_pause = 10, fps = 20, duration = 12
)
Week = 0, Season = 2020
Week = 0
Season = 2020
library(jsonlite)
library(data.table)
library(tidyverse)
library(gtools)
library(stringr)
paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info")
### Set Week
if(week == 0){week_no <- paste0(10, season)}
if(week > 0){week_no <- paste0(11, season, week)}
season = 2020
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
season = 2019
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
View(ESPN_JSON)
season = 2020
View(ESPN_JSON)
View(ESPN_JSON[["players"]])
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/1/leaguedefaults/1?view=kona_player_info"))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/2/leaguedefaults/1?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/2?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/0?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/0?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
View(ESPN_JSON)
test <- fromJSON("/Users/jonathangoldberg/Downloads/download.json")
View(test)
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"), pagesize = 100000)
jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
source('~/Google Drive/Random/Sports/Fantasy Football/Projection Scraping/Scraping Scripts/ESPN Projections v1.R', echo=TRUE)
##### Season Projections
source('/Users/jonathangoldberg/Google Drive/Random/Sports/Fantasy Football/Projection Scraping/Projections_Main.R', echo=TRUE)
setwd("/Users/jonathangoldberg/Google Drive/Random/Sports/Fantasy Football/Projection Scraping")
Fantasy_Football_Projections(sources = c(
"FantasySharks",
"CBS",
"ESPN",
"Sleeper",
#"Yahoo",
"FantasyPros",
"NFL"), Week = 0, Season = 2020,
Scoring = "Standard", VOR = "Ben", MaxBid = FALSE, Keep.Platform.Projections = TRUE, Proper.Floors = FALSE, Predictions = TRUE)
View(ESPN_JSON)
ESPN_JSON[[1]][["players"]][[1]][["player"]][["lastName"]]
### Put Important Information Together
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[["players"]][["id"]],
"Player" = ESPN_JSON[["players"]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[["players"]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[["players"]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[["players"]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[["players"]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[["players"]][["player"]][["ownership"]][["averageDraftPosition"]]
)
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info", flatten = TRUE))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info"))
View(ESPN_JSON)
ESPN_JSON[["players"]][["player"]][["lastName"]]
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/5?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/4?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/2?view=kona_player_info"))
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
ESPN_JSON[["players"]][["player"]][["lastName"]]
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info"))
### Get Player
ESPN_JSON <- jsonlite::fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info"))
https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leaguedefaults/3?view=kona_player_info
paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info")
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info"))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- jsonlite::fromJSON(jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info")))
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/3?view=kona_player_info"))
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/0?view=kona_player_info"))
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
View(ESPN_JSON)
ESPN_JSON[[2]][["players"]][[1]][["player"]][["fullName"]]
ESPN_JSON[[1]][["players"]][[1]][["player"]][["fullName"]]
### Get Player
ESPN_JSON <- jsonlite::fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
### Get Player
ESPN_JSON <- rjson::fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
rjson::fromJSON()
?fromJSON
### Get Player
ESPN_JSON <- rjson::fromJSON(file = paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- rjson::fromJSON(file = paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"), simplify = TRUE)
View(ESPN_JSON)
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
View(ESPN_JSON)
View(ESPN_JSON)
### Get Player
ESPN_JSON <- fromJSON(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/1?view=kona_player_info"))
View(ESPN_JSON)
### Get Player
ESPN_JSON <- jsonlite::read_json(paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/", season, "/segments/0/leaguedefaults/?view=kona_player_info"))
View(ESPN_JSON)
length(ESPN_JSON[[1]])
length(list(ESPN_JSON[[1]]))
View(ESPN_JSON)
length(ESPN_JSON[[1]][["players"]])
ESPN_JSON[["players"]][["id"]]
ESPN_JSON[[1]][["players"]][["id"]][["id"]]
ESPN_JSON[[1]][["players"]][[1]][["id"]]
ESPN_JSON[[1]][["players"]][[1]][["id"]][["id"]
d
d
ESPN_JSON[[1]][["players"]][[1]][["id"]][["id"]]
ESPN_JSON[[1]][["players"]][[1]][["id"]]
ESPN_JSON[[1]][["players"]][[1]][["id"]][["player"]][["fullName"]]
### Put Important Information Together
purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["id"]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["id"]][["player"]][["ownership"]][["averageDraftPosition"]]
)
)
x = 1
ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]]
ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]]
ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]]
round(ESPN_JSON[[1]][["players"]][[x]][["id"]][["player"]][["ownership"]][["auctionValueAverage"]], 2)
### Put Important Information Together
purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]]
)
)
View(ESPN_JSON)
ESPN_JSON[[1]][["players"]][[1]][["player"]][["stats"]]
### Put Important Information Together
ESPN_Projections <- purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]],
"Stats" =
)
)
### Put Important Information Together
ESPN_Projections <- purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]]
)
)
ESPN_JSON[[1]][["players"]][["player"]][["stats"]]
ESPN_JSON[[1]][["players"]][[x]][["stats"]]
### Separate the projections
espn_stat_projections <- ESPN_JSON[[1]][["players"]][[1]][["player"]][["stats"]]
View(espn_stat_projections)
### Separate the projections
espn_stat_projections <- ESPN_JSON[[1]][["players"]][[1]][["player"]][["stats"]] %>% as_tibble()
### Separate the projections
espn_stat_projections <- ESPN_JSON[[1]][["players"]][[1]][["player"]][["stats"]] %>% unlist()
ESPN_JSON[[1]][["players"]][[1]][["player"]][["stats"]][[1]]
View(ESPN_Projections)
View(ESPN_Projections)
View(ESPN_Projections)
### Put Important Information Together
ESPN_Projections <- purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]],
"Stats" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]]
)
)
ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]]
### Put Important Information Together
ESPN_Projections <- purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]],
"Stats" = list(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]])
)
)
### Put Important Information Together
ESPN_Projections <- purrr::map_df(1:length(ESPN_JSON[[1]][["players"]]), function(x)
ESPN_Projections <- data.frame(
"Platform" = c("ESPN"),
"id" = ESPN_JSON[[1]][["players"]][[x]][["id"]],
"Player" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["fullName"]],
"Team ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["proTeamId"]],
"Position ID" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["defaultPositionId"]],
"Auction Value" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["draftRanksByRankType"]][["PPR"]][["auctionValue"]],
"Average Auction Value" = round(ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["auctionValueAverage"]], 2),
"Average Draft Position" = ESPN_JSON[[1]][["players"]][[x]][["player"]][["ownership"]][["averageDraftPosition"]]
)
)
ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]]
data.frame(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]])
data.frame(matrix(unlist(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]]), nrow=length(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]]), byrow=T))
do.call(rbind.data.frame, ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]])
do.call(bind_rows, ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]])
ldply (ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]], data.frame)
ldply(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]], data.frame)
plr::ldply(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]], data.frame)
plyr::ldply(ESPN_JSON[[1]][["players"]][[x]][["player"]][["stats"]], data.frame)
